package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"regexp"
	"strconv"

	"strings"

	gojenkins "github.com/jenkins-x/golang-jenkins"
)

const (
	APITOKEN   = "1180585041984f6c3d8c525852041c0772" // uniapp
	JENKINSURL = "https://jenkins.mimo.immo"
)

type AutoGenerated struct {
	Name        string `json:"name"`
	Appid       string `json:"appid"`
	Description string `json:"description"`
	VersionName string `json:"versionName"`
	VersionCode int    `json:"versionCode"`
	TransformPx bool   `json:"transformPx"`
	AppPlus     struct {
		SoftinputMode     string `json:"softinputMode"`
		UsingComponents   bool   `json:"usingComponents"`
		NvueCompiler      string `json:"nvueCompiler"`
		NvueStyleCompiler string `json:"nvueStyleCompiler"`
		CompilerVersion   int    `json:"compilerVersion"`
		Splashscreen      struct {
			AlwaysShowBeforeRender bool `json:"alwaysShowBeforeRender"`
			Waiting                bool `json:"waiting"`
			Autoclose              bool `json:"autoclose"`
			Delay                  int  `json:"delay"`
		} `json:"splashscreen"`
		Safearea struct {
			Bottom struct {
				Offset string `json:"offset"`
			} `json:"bottom"`
		} `json:"safearea"`
		Compatible struct {
			IgnoreVersion bool `json:"ignoreVersion"`
		} `json:"compatible"`
		Modules struct {
			OAuth struct {
			} `json:"OAuth"`
			Barcode struct {
			} `json:"Barcode"`
			Camera struct {
			} `json:"Camera"`
			Record struct {
			} `json:"Record"`
			Push struct {
			} `json:"Push"`
			VideoPlayer struct {
			} `json:"VideoPlayer"`
		} `json:"modules"`
		Distribute struct {
			Android struct {
				Permissions          []string `json:"permissions"`
				AbiFilters           []string `json:"abiFilters"`
				PermissionPhoneState struct {
					Request string `json:"request"`
					Prompt  string `json:"prompt"`
				} `json:"permissionPhoneState"`
				Schemes       string `json:"schemes"`
				MinSdkVersion int    `json:"minSdkVersion"`
			} `json:"android"`
			Ios struct {
				Urltypes []struct {
					Urlidentifier string   `json:"urlidentifier"`
					Urlschemes    []string `json:"urlschemes"`
				} `json:"urltypes"`
				DSYMs              bool `json:"dSYMs"`
				Idfa               bool `json:"idfa"`
				PrivacyDescription struct {
					NSPhotoLibraryUsageDescription    string `json:"NSPhotoLibraryUsageDescription"`
					NSCameraUsageDescription          string `json:"NSCameraUsageDescription"`
					NSMicrophoneUsageDescription      string `json:"NSMicrophoneUsageDescription"`
					NSPhotoLibraryAddUsageDescription string `json:"NSPhotoLibraryAddUsageDescription"`
				} `json:"privacyDescription"`
				UIBackgroundModes string `json:"UIBackgroundModes"`
			} `json:"ios"`
			SdkConfigs struct {
				Ad struct {
				} `json:"ad"`
				Oauth struct {
					Apple struct {
					} `json:"apple"`
					Facebook struct {
						Appid string `json:"appid"`
					} `json:"facebook"`
				} `json:"oauth"`
				Push struct {
					Unipush interface{} `json:"unipush"`
				} `json:"push"`
			} `json:"sdkConfigs"`
			Icons struct {
				Android struct {
					Hdpi    string `json:"hdpi"`
					Xhdpi   string `json:"xhdpi"`
					Xxhdpi  string `json:"xxhdpi"`
					Xxxhdpi string `json:"xxxhdpi"`
				} `json:"android"`
				Ios struct {
					Appstore string `json:"appstore"`
					Ipad     struct {
						App            string `json:"app"`
						App2X          string `json:"app@2x"`
						Notification   string `json:"notification"`
						Notification2X string `json:"notification@2x"`
						Proapp2X       string `json:"proapp@2x"`
						Settings       string `json:"settings"`
						Settings2X     string `json:"settings@2x"`
						Spotlight      string `json:"spotlight"`
						Spotlight2X    string `json:"spotlight@2x"`
					} `json:"ipad"`
					Iphone struct {
						App2X          string `json:"app@2x"`
						App3X          string `json:"app@3x"`
						Notification2X string `json:"notification@2x"`
						Notification3X string `json:"notification@3x"`
						Settings2X     string `json:"settings@2x"`
						Settings3X     string `json:"settings@3x"`
						Spotlight2X    string `json:"spotlight@2x"`
						Spotlight3X    string `json:"spotlight@3x"`
					} `json:"iphone"`
				} `json:"ios"`
			} `json:"icons"`
			Splashscreen struct {
				AndroidStyle string `json:"androidStyle"`
				Android      struct {
					Hdpi   string `json:"hdpi"`
					Xhdpi  string `json:"xhdpi"`
					Xxhdpi string `json:"xxhdpi"`
				} `json:"android"`
				UseOriginalMsgbox bool   `json:"useOriginalMsgbox"`
				IosStyle          string `json:"iosStyle"`
				Ios               struct {
					Storyboard string `json:"storyboard"`
				} `json:"ios"`
			} `json:"splashscreen"`
		} `json:"distribute"`
		Locales struct {
			En struct {
				Ios struct {
					PrivacyDescription struct {
						NSPhotoLibraryUsageDescription string `json:"NSPhotoLibraryUsageDescription"`
						NSCameraUsageDescription       string `json:"NSCameraUsageDescription"`
						NSMicrophoneUsageDescription   string `json:"NSMicrophoneUsageDescription"`
					} `json:"privacyDescription"`
				} `json:"ios"`
			} `json:"en"`
			Zh struct {
				Ios struct {
					PrivacyDescription struct {
						NSPhotoLibraryUsageDescription string `json:"NSPhotoLibraryUsageDescription"`
						NSCameraUsageDescription       string `json:"NSCameraUsageDescription"`
						NSMicrophoneUsageDescription   string `json:"NSMicrophoneUsageDescription"`
					} `json:"privacyDescription"`
				} `json:"ios"`
			} `json:"zh"`
		} `json:"locales"`
		NativePlugins struct {
			JYGoogleSignin struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"JY-GoogleSignin"`
			HsjScreenshothsj struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"hsj-screenshothsj"`
			YiDianScreenshot struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"YiDian-Screenshot"`
			LogModule struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"Log-Module"`
			ClSqlite struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"Cl-Sqlite"`
			MimoEMIM struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"MimoEMIM"`
			CLWebH5View struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"CL-WebH5View"`
			AgoraRTC struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"Agora-RTC"`
			MimoVideoCover struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"MimoVideoCover"`
			Wrsimagepicker struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"wrs-imagepicker"`
			Html5appVideoCover struct {
				PluginInfo struct {
					Name               string `json:"name"`
					Description        string `json:"description"`
					Platforms          string `json:"platforms"`
					URL                string `json:"url"`
					AndroidPackageName string `json:"android_package_name"`
					IosBundleID        string `json:"ios_bundle_id"`
					IsCloud            bool   `json:"isCloud"`
					Bought             int    `json:"bought"`
					Pid                string `json:"pid"`
					Parameters         struct {
					} `json:"parameters"`
				} `json:"__plugin_info__"`
			} `json:"Html5app-VideoCover"`
		} `json:"nativePlugins"`
		NvueLaunchMode string `json:"nvueLaunchMode"`
		UniStatistics  struct {
			Enable bool `json:"enable"`
		} `json:"uniStatistics"`
	} `json:"app-plus"`
	ChannelList []struct {
		ID   string `json:"id"`
		Name string `json:"name"`
	} `json:"channel_list"`
	Quickapp struct {
	} `json:"quickapp"`
	MpWeixin struct {
		Appid   string `json:"appid"`
		Setting struct {
			URLCheck bool `json:"urlCheck"`
		} `json:"setting"`
		UsingComponents bool `json:"usingComponents"`
	} `json:"mp-weixin"`
	MpAlipay struct {
		UsingComponents bool `json:"usingComponents"`
	} `json:"mp-alipay"`
	MpBaidu struct {
		UsingComponents bool `json:"usingComponents"`
	} `json:"mp-baidu"`
	MpToutiao struct {
		UsingComponents bool `json:"usingComponents"`
	} `json:"mp-toutiao"`
	UniStatistics struct {
		Enable  bool   `json:"enable"`
		Version string `json:"version"`
	} `json:"uniStatistics"`
	VueVersion string `json:"vueVersion"`
}

// go run main.go [prepare] env AndroidPackageName IosBundleID AppID Tag RootPath TargetSdkVersion
func prepare() {

	env := os.Args[2]
	rootPath := os.Args[7]
	// targetSdkVersion := os.Args[8]

	baseUrlPath := fmt.Sprintf("%s/common/const/baseUrl.const.js", rootPath)

	if env == "test" {
		command := fmt.Sprintf("gsed -E -i 's/let PROD = \\w+/let PROD = false/g' %s", baseUrlPath)
		cmd := exec.Command("/bin/bash", "-c", command)
		_, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Println("baseUrl err:", err.Error())
			panic(err)
		}
	} else if env == "prod" {
		command := fmt.Sprintf("gsed -E -i 's/let PROD = \\w+/let PROD = true/g' %s", baseUrlPath)
		cmd := exec.Command("/bin/bash", "-c", command)
		_, err := cmd.CombinedOutput()
		if err != nil {
			fmt.Println("baseUrl err:", err.Error())
			panic(err)
		}
	}

	androidPackageName := os.Args[3]
	iosBundleID := os.Args[4]
	appID := os.Args[5]
	version := os.Args[6]
	versionCodeStr := os.Args[7]

	// manifestBakPath := fmt.Sprintf("%s/manifestbak.json", rootPath)
	manifestPath := fmt.Sprintf("%s/manifest.json", rootPath)
	curFile, curErr := os.OpenFile(manifestPath, os.O_RDWR|os.O_CREATE, 0666)
	if curErr != nil {
		fmt.Println("open file err:", curErr.Error())
		panic(curErr)
	}
	curContent, _ := ioutil.ReadAll(curFile)
	curFile.Close()
	content := AutoGenerated{}
	err := json.Unmarshal(curContent, &content)
	if err != nil {
		fmt.Println("json unmarshal err:", err.Error())
		panic(err)
	}

	// 全部用入参重写

	content.Appid = appID

	versionCode, _ := strconv.Atoi(versionCodeStr)
	content.VersionCode = versionCode

	// content.AppPlus.Distribute.Android.TargetSdkVersion = targetSdkVersion

	content.AppPlus.NativePlugins.YiDianScreenshot.PluginInfo.AndroidPackageName = androidPackageName
	content.AppPlus.NativePlugins.CLWebH5View.PluginInfo.AndroidPackageName = androidPackageName
	content.AppPlus.NativePlugins.HsjScreenshothsj.PluginInfo.AndroidPackageName = androidPackageName
	content.AppPlus.NativePlugins.JYGoogleSignin.PluginInfo.AndroidPackageName = androidPackageName
	content.AppPlus.NativePlugins.AgoraRTC.PluginInfo.AndroidPackageName = androidPackageName

	content.AppPlus.NativePlugins.YiDianScreenshot.PluginInfo.IosBundleID = iosBundleID
	content.AppPlus.NativePlugins.CLWebH5View.PluginInfo.IosBundleID = iosBundleID
	content.AppPlus.NativePlugins.HsjScreenshothsj.PluginInfo.IosBundleID = iosBundleID
	content.AppPlus.NativePlugins.JYGoogleSignin.PluginInfo.IosBundleID = iosBundleID
	content.AppPlus.NativePlugins.AgoraRTC.PluginInfo.IosBundleID = iosBundleID

	content.AppPlus.Modules.VideoPlayer = struct{}{}

	content.VersionName = version

	contentBytes, err := json.Marshal(content)

	if err != nil {
		fmt.Println("json marshal err:", err.Error())
		panic(err)
	}

	// 重新覆盖写入
	curErr = ioutil.WriteFile(manifestPath, contentBytes, 0644)

	if curErr != nil {
		fmt.Println("writefile err:", curErr.Error())
		panic(curErr)
	}

}

// go run main.go [download] jobName packageName rootPath
func download() {

	auth := &gojenkins.Auth{
		Username: "linxin",
		ApiToken: APITOKEN,
	}
	jenkins := gojenkins.NewJenkins(auth, JENKINSURL)

	jobName := os.Args[2]
	packageName := os.Args[3]
	rootPath := os.Args[4]

	job, err := jenkins.GetJob(jobName)
	if err != nil {
		panic(err)
	}
	//fmt.Println("job:", job)
	job.Url = strings.Replace(job.Url, "http://jenkins:8080", JENKINSURL, 1)
	fmt.Println(job.Url)

	build, err := jenkins.GetLastBuild(job)
	if err != nil {
		panic(err)
	}

	build.Url = strings.Replace(build.Url, "http://jenkins:8080", JENKINSURL, 1)

	var output []byte
	output, err = jenkins.GetBuildConsoleOutput(build)
	if err != nil {
		panic(err)
	}

	outputStr := string(output)

	reg, _ := regexp.Compile(`.*下载地址: https://ide.dcloud.net.cn/build/download/(.*)（注意该地址为临.*`)
	match := reg.FindStringSubmatch(outputStr)
	if len(match) != 2 {
		return
	}
	filePath := fmt.Sprintf("https://ide.dcloud.net.cn/build/download/%s", match[1])
	cmd := fmt.Sprintf("/usr/local/bin/wget -O %s/%s %s", rootPath, packageName, filePath)

	c := exec.Command("/bin/bash", "-c", cmd)
	err = c.Run()
	if err != nil {
		panic(err)
	}

}

// go run main.go [bothDownload] jobName  androidPackageName  iosPackageName rootPath
func bothDownload() {

	auth := &gojenkins.Auth{
		Username: "linxin",
		ApiToken: APITOKEN,
	}
	jenkins := gojenkins.NewJenkins(auth, JENKINSURL)

	jobName := os.Args[2]
	androidPackageName := os.Args[3]
	iosPackageName := os.Args[4]
	rootPath := os.Args[5]

	job, err := jenkins.GetJob(jobName)
	if err != nil {
		panic(err)
	}
	job.Url = strings.Replace(job.Url, "http://jenkins:8080", JENKINSURL, 1)

	build, err := jenkins.GetLastBuild(job)
	if err != nil {
		panic(err)
	}
	build.Url = strings.Replace(build.Url, "http://jenkins:8080", JENKINSURL, 1)

	var output []byte
	output, err = jenkins.GetBuildConsoleOutput(build)
	if err != nil {
		panic(err)
	}

	outputStr := string(output)

	reg, _ := regexp.Compile(`.*iOS Appstore 下载地址: https://ide.dcloud.net.cn/build/download/(.*) （注意该地址为临.*`)
	match := reg.FindStringSubmatch(outputStr)
	if len(match) != 2 {
		return
	}
	filePath := fmt.Sprintf("https://ide.dcloud.net.cn/build/download/%s", match[1])
	cmd := fmt.Sprintf("/usr/local/bin/wget -O %s/%s %s", rootPath, iosPackageName, filePath)

	c := exec.Command("/bin/bash", "-c", cmd)
	err = c.Run()
	if err != nil {
		fmt.Println(err.Error())
		panic(err)
	}

	reg1, _ := regexp.Compile(`.*Android自有证书 下载地址: https://ide.dcloud.net.cn/build/download/(.*) （注意该地址为临.*`)
	match1 := reg1.FindStringSubmatch(outputStr)
	if len(match1) != 2 {
		return
	}
	filePath1 := fmt.Sprintf("https://ide.dcloud.net.cn/build/download/%s", match1[1])
	cmd1 := fmt.Sprintf("/usr/local/bin/wget -O %s/%s %s", rootPath, androidPackageName, filePath1)

	c1 := exec.Command("/bin/bash", "-c", cmd1)
	err = c1.Run()
	if err != nil {
		fmt.Println(err.Error())
		panic(err)
	}

}

// go run main.go [prepare/download] jobName packageName

func main() {

	opt := os.Args[1]

	switch opt {
	case "prepare":
		prepare()
	case "download":
		download()
	case "bothDownload":
		bothDownload()
	default:
		return
	}

}
